import axios, { AxiosResponse, AxiosError, AxiosRequestConfig } from 'axios';
import ROUTES from './routes';

// Создаем экземпляр axios с базовым URL и настройками
const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api',
  timeout: 10000,  // 10 секунд таймаут для запросов
});

// Функция для проверки доступности сервера по порту
export const checkServerPort = async (port: number): Promise<boolean> => {
  try {
    const response = await fetch(`http://localhost:${port}/health`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      signal: AbortSignal.timeout(2000), // таймаут 2 секунды
    });
    return response.status === 200;
  } catch (error) {
    console.error(`Сервер на порту ${port} недоступен:`, error);
    return false;
  }
};

// Функция для повторения запроса с разными портами
export const retryWithPorts = async <T>(
  apiCall: (baseUrl: string) => Promise<AxiosResponse<T>>,
  ports: number[] = [3001, 3000, 8000, 8080]
): Promise<AxiosResponse<T>> => {
  for (const port of ports) {
    try {
      const isPortAvailable = await checkServerPort(port);
      if (isPortAvailable) {
        const baseUrl = `http://localhost:${port}/api`;
        return await apiCall(baseUrl);
      }
    } catch (error) {
      console.error(`Ошибка при запросе к порту ${port}:`, error);
    }
  }
  throw new Error('Не удалось выполнить запрос. Все порты недоступны.');
};

// Добавляем interceptor для запросов (добавление токена)
axiosInstance.interceptors.request.use(
  (config) => {
    // Получаем токен из localStorage
    const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;
    
    // Если токен есть, добавляем его в заголовки
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
    
  return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Добавляем interceptor для ответов (обработка ошибок)
axiosInstance.interceptors.response.use(
  (response) => {
  return response;
  },
  (error: AxiosError) => {
    // Проверяем статус ответа
  if (error.response) {
      // Если 401 или 403, перенаправляем на страницу логина
      if (error.response.status === 401 || error.response.status === 403) {
        // Очищаем localStorage
        if (typeof window !== 'undefined') {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          
          // Если не на странице логина, перенаправляем
          if (window.location.pathname !== '/login' && window.location.pathname !== '/') {
            window.location.href = '/login';
          }
        }
      }

      // Логируем ошибку
      console.error('API Response Error:', {
        status: error.response.status,
        statusText: error.response.statusText,
        url: error.config?.url,
        data: error.response.data
      });
  } else if (error.request) {
      // Запрос был сделан, но ответ не получен
      console.error('API Request Error (No Response):', error.request);
    } else {
      // Что-то пошло не так при настройке запроса
      console.error('API Request Setup Error:', error.message);
  }
  
  return Promise.reject(error);
  }
);

// Интерфейсы для запросов и ответов
export interface BalanceWheel {
  physical: number;
  emotional: number;
  intellectual: number;
  spiritual: number;
  occupational: number;
  social: number;
  environmental: number;
  financial: number;
  date?: Date;
  userId?: string;
  id?: string;
  _id?: string;
}

export interface MoodEntry {
  userId: string;
  date: Date | string;
  mood: number;
  energy: number;
  comment?: string;
  id?: string;
  _id?: string;
}

export interface PlayerStatus {
  userId: string;
  moodComplete: boolean;
  balanceWheelComplete: boolean;
  testsComplete: boolean;
}

// API функции для работы с игроками
export const getPlayers = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/players');
  } catch (error) {
    console.error('Ошибка при получении списка игроков:', error);
    throw error;
  }
};

export const getPlayerById = async (id: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/players/${id}`);
  } catch (error) {
    console.error(`Ошибка при получении игрока с ID ${id}:`, error);
    throw error;
  }
};

export const getPlayerStats = async (id: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/players/${id}/stats`);
  } catch (error) {
    console.error(`Ошибка при получении статистики игрока с ID ${id}:`, error);
    throw error;
  }
};

// API функции для работы с колесом баланса
export const getPlayerBalanceWheels = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/balance-wheel/player/${playerId}`);
  } catch (error) {
    console.error(`Ошибка при получении колес баланса игрока с ID ${playerId}:`, error);
    throw error;
  }
};

export const getPlayerBalanceWheelByDate = async (playerId: string, date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/balance-wheel/player/${playerId}/date/${date}`);
  } catch (error) {
    console.error(`Ошибка при получении колеса баланса игрока с ID ${playerId} на дату ${date}:`, error);
    throw error;
  }
};

export const saveBalanceWheel = async (playerId: string, data: BalanceWheel): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/balance-wheel/player/${playerId}`, data);
  } catch (error) {
    console.error(`Ошибка при сохранении колеса баланса игрока с ID ${playerId}:`, error);
    throw error;
  }
};

export const updatePlayerBalanceWheel = async (wheelId: string, data: BalanceWheel): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.put(`/balance-wheel/${wheelId}`, data);
  } catch (error) {
    console.error(`Ошибка при обновлении колеса баланса с ID ${wheelId}:`, error);
    throw error;
  }
};

export const getAllPlayersBalanceWheelStats = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/balance-wheel/stats/all');
  } catch (error) {
    console.error('Ошибка при получении статистики колес баланса всех игроков:', error);
    throw error;
  }
};

export const getAllPlayersBalanceWheelStatsByDate = async (date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/balance-wheel/stats/all/date/${date}`);
  } catch (error) {
    console.error(`Ошибка при получении статистики колес баланса всех игроков на дату ${date}:`, error);
    throw error;
  }
};

export const forceRefreshBalanceWheel = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/balance-wheel/refresh/${playerId}`);
  } catch (error) {
    console.error(`Ошибка при принудительном обновлении колеса баланса игрока с ID ${playerId}:`, error);
    throw error;
  }
};

// API функции для работы с записями настроения и энергии
export const getPlayerMood = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/mood/player/${playerId}`);
  } catch (error) {
    console.error(`Ошибка при получении записей настроения игрока с ID ${playerId}:`, error);
    throw error;
  }
};

export const getPlayerMoodByDate = async (playerId: string, date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/mood/player/${playerId}/date/${date}`);
  } catch (error) {
    console.error(`Ошибка при получении записей настроения игрока с ID ${playerId} на дату ${date}:`, error);
    throw error;
  }
};

export const getAllPlayersMoodStats = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/mood/stats/all');
  } catch (error) {
    console.error('Ошибка при получении статистики настроения всех игроков:', error);
    throw error;
  }
};

export const getAllPlayersMoodStatsByDate = async (date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/mood/stats/all/date/${date}`);
  } catch (error) {
    console.error(`Ошибка при получении статистики настроения всех игроков на дату ${date}:`, error);
    throw error;
  }
};

export const saveMoodEntry = async (playerId: string, data: MoodEntry): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/mood/player/${playerId}`, data);
  } catch (error) {
    console.error(`Ошибка при сохранении записи настроения игрока с ID ${playerId}:`, error);
    throw error;
  }
};

export const updateMoodEntry = async (entryId: string, data: MoodEntry): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.put(`/mood/${entryId}`, data);
  } catch (error) {
    console.error(`Ошибка при обновлении записи настроения с ID ${entryId}:`, error);
    throw error;
  }
};

export const forceRefreshMood = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/mood/refresh/${playerId}`);
  } catch (error) {
    console.error(`Ошибка при принудительном обновлении записей настроения игрока с ID ${playerId}:`, error);
    throw error;
  }
};

// API функции для работы с тестами
export const getPlayerTests = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/tests/player/${playerId}`);
  } catch (error) {
    console.error(`Ошибка при получении тестов игрока с ID ${playerId}:`, error);
      throw error;
    }
};

export const getPlayerTestsByDate = async (playerId: string, date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/tests/player/${playerId}/date/${date}`);
  } catch (error) {
    console.error(`Ошибка при получении тестов игрока с ID ${playerId} на дату ${date}:`, error);
    throw error;
  }
};

export const getAllPlayersTestStats = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/tests/stats/all');
  } catch (error) {
    console.error('Ошибка при получении статистики тестов всех игроков:', error);
    throw error;
  }
};

export const getAllPlayersTestStatsByDate = async (date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/tests/stats/all/date/${date}`);
  } catch (error) {
    console.error(`Ошибка при получении статистики тестов всех игроков на дату ${date}:`, error);
    throw error;
  }
};

export const saveTestEntry = async (playerId: string, data: any): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/tests/player/${playerId}`, data);
  } catch (error) {
    console.error(`Ошибка при сохранении теста игрока с ID ${playerId}:`, error);
    throw error;
  }
};

export const updateTestEntry = async (testId: string, data: any): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.put(`/tests/${testId}`, data);
  } catch (error) {
    console.error(`Ошибка при обновлении теста с ID ${testId}:`, error);
    throw error;
  }
};

export const forceRefreshTests = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/tests/refresh/${playerId}`);
  } catch (error) {
    console.error(`Ошибка при принудительном обновлении тестов игрока с ID ${playerId}:`, error);
    throw error;
  }
};

// API функции для аутентификации
export const login = async (email: string, password: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post('/auth/login', { email, password });
  } catch (error) {
    console.error('Ошибка при входе в систему:', error);
    throw error;
  }
};

export const register = async (userData: any): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post('/auth/register', userData);
  } catch (error) {
    console.error('Ошибка при регистрации:', error);
    throw error;
  }
};

export const changePassword = async (userId: string, oldPassword: string, newPassword: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/auth/change-password/${userId}`, { oldPassword, newPassword });
  } catch (error) {
    console.error(`Ошибка при изменении пароля для пользователя с ID ${userId}:`, error);
    throw error;
  }
};

export const logout = (): void => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/login';
  }
};

// Экспортируем экземпляр axios для использования в компонентах
export default axiosInstance; 