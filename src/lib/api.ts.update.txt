import axios, { AxiosResponse, AxiosError, AxiosRequestConfig } from 'axios';
import ROUTES from './routes';

// РЎРѕР·РґР°РµРј СЌРєР·РµРјРїР»СЏСЂ axios СЃ Р±Р°Р·РѕРІС‹Рј URL Рё РЅР°СЃС‚СЂРѕР№РєР°РјРё
const axiosInstance = axios.create({
  baseURL: process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3001/api',
  timeout: 10000,  // 10 СЃРµРєСѓРЅРґ С‚Р°Р№РјР°СѓС‚ РґР»СЏ Р·Р°РїСЂРѕСЃРѕРІ
});

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїСЂРѕРІРµСЂРєРё РґРѕСЃС‚СѓРїРЅРѕСЃС‚Рё СЃРµСЂРІРµСЂР° РїРѕ РїРѕСЂС‚Сѓ
export const checkServerPort = async (port: number): Promise<boolean> => {
  try {
    const response = await fetch(`http://localhost:${port}/health`, {
      method: 'GET',
      headers: { 'Content-Type': 'application/json' },
      signal: AbortSignal.timeout(2000), // С‚Р°Р№РјР°СѓС‚ 2 СЃРµРєСѓРЅРґС‹
    });
    return response.status === 200;
  } catch (error) {
    console.error(`РЎРµСЂРІРµСЂ РЅР° РїРѕСЂС‚Сѓ ${port} РЅРµРґРѕСЃС‚СѓРїРµРЅ:`, error);
    return false;
  }
};

// Р¤СѓРЅРєС†РёСЏ РґР»СЏ РїРѕРІС‚РѕСЂРµРЅРёСЏ Р·Р°РїСЂРѕСЃР° СЃ СЂР°Р·РЅС‹РјРё РїРѕСЂС‚Р°РјРё
export const retryWithPorts = async <T>(
  apiCall: (baseUrl: string) => Promise<AxiosResponse<T>>,
  ports: number[] = [3001, 3000, 8000, 8080]
): Promise<AxiosResponse<T>> => {
  for (const port of ports) {
    try {
      const isPortAvailable = await checkServerPort(port);
      if (isPortAvailable) {
        const baseUrl = `http://localhost:${port}/api`;
        return await apiCall(baseUrl);
      }
    } catch (error) {
      console.error(`РћС€РёР±РєР° РїСЂРё Р·Р°РїСЂРѕСЃРµ Рє РїРѕСЂС‚Сѓ ${port}:`, error);
    }
  }
  throw new Error('РќРµ СѓРґР°Р»РѕСЃСЊ РІС‹РїРѕР»РЅРёС‚СЊ Р·Р°РїСЂРѕСЃ. Р’СЃРµ РїРѕСЂС‚С‹ РЅРµРґРѕСЃС‚СѓРїРЅС‹.');
};

// Р”РѕР±Р°РІР»СЏРµРј interceptor РґР»СЏ Р·Р°РїСЂРѕСЃРѕРІ (РґРѕР±Р°РІР»РµРЅРёРµ С‚РѕРєРµРЅР°)
axiosInstance.interceptors.request.use(
  (config) => {
    // РџРѕР»СѓС‡Р°РµРј С‚РѕРєРµРЅ РёР· localStorage
    const token = typeof window !== 'undefined' ? localStorage.getItem('token') : null;
    
    // Р•СЃР»Рё С‚РѕРєРµРЅ РµСЃС‚СЊ, РґРѕР±Р°РІР»СЏРµРј РµРіРѕ РІ Р·Р°РіРѕР»РѕРІРєРё
  if (token) {
    config.headers.Authorization = `Bearer ${token}`;
  }
    
  return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Р”РѕР±Р°РІР»СЏРµРј interceptor РґР»СЏ РѕС‚РІРµС‚РѕРІ (РѕР±СЂР°Р±РѕС‚РєР° РѕС€РёР±РѕРє)
axiosInstance.interceptors.response.use(
  (response) => {
  return response;
  },
  (error: AxiosError) => {
    // РџСЂРѕРІРµСЂСЏРµРј СЃС‚Р°С‚СѓСЃ РѕС‚РІРµС‚Р°
  if (error.response) {
      // Р•СЃР»Рё 401 РёР»Рё 403, РїРµСЂРµРЅР°РїСЂР°РІР»СЏРµРј РЅР° СЃС‚СЂР°РЅРёС†Сѓ Р»РѕРіРёРЅР°
      if (error.response.status === 401 || error.response.status === 403) {
        // РћС‡РёС‰Р°РµРј localStorage
        if (typeof window !== 'undefined') {
          localStorage.removeItem('token');
          localStorage.removeItem('user');
          
          // Р•СЃР»Рё РЅРµ РЅР° СЃС‚СЂР°РЅРёС†Рµ Р»РѕРіРёРЅР°, РїРµСЂРµРЅР°РїСЂР°РІР»СЏРµРј
          if (window.location.pathname !== '/login' && window.location.pathname !== '/') {
            window.location.href = '/login';
          }
        }
      }

      // Р›РѕРіРёСЂСѓРµРј РѕС€РёР±РєСѓ
      console.error('API Response Error:', {
        status: error.response.status,
        statusText: error.response.statusText,
        url: error.config?.url,
        data: error.response.data
      });
  } else if (error.request) {
      // Р—Р°РїСЂРѕСЃ Р±С‹Р» СЃРґРµР»Р°РЅ, РЅРѕ РѕС‚РІРµС‚ РЅРµ РїРѕР»СѓС‡РµРЅ
      console.error('API Request Error (No Response):', error.request);
    } else {
      // Р§С‚Рѕ-С‚Рѕ РїРѕС€Р»Рѕ РЅРµ С‚Р°Рє РїСЂРё РЅР°СЃС‚СЂРѕР№РєРµ Р·Р°РїСЂРѕСЃР°
      console.error('API Request Setup Error:', error.message);
  }
  
  return Promise.reject(error);
  }
);

// РРЅС‚РµСЂС„РµР№СЃС‹ РґР»СЏ Р·Р°РїСЂРѕСЃРѕРІ Рё РѕС‚РІРµС‚РѕРІ
export interface BalanceWheel {
  physical: number;
  emotional: number;
  intellectual: number;
  spiritual: number;
  occupational: number;
  social: number;
  environmental: number;
  financial: number;
  date?: Date;
  userId?: string;
  id?: string;
  _id?: string;
}

export interface MoodEntry {
  userId: string;
  date: Date | string;
  mood: number;
  energy: number;
  comment?: string;
  id?: string;
  _id?: string;
}

export interface PlayerStatus {
  userId: string;
  moodComplete: boolean;
  balanceWheelComplete: boolean;
  testsComplete: boolean;
}

// API С„СѓРЅРєС†РёРё РґР»СЏ СЂР°Р±РѕС‚С‹ СЃ РёРіСЂРѕРєР°РјРё
export const getPlayers = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/players');
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃРїРёСЃРєР° РёРіСЂРѕРєРѕРІ:', error);
    throw error;
  }
};

export const getPlayerById = async (id: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/players/${id}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё РёРіСЂРѕРєР° СЃ ID ${id}:`, error);
    throw error;
  }
};

export const getPlayerStats = async (id: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/players/${id}/stats`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃС‚Р°С‚РёСЃС‚РёРєРё РёРіСЂРѕРєР° СЃ ID ${id}:`, error);
    throw error;
  }
};

// API С„СѓРЅРєС†РёРё РґР»СЏ СЂР°Р±РѕС‚С‹ СЃ РєРѕР»РµСЃРѕРј Р±Р°Р»Р°РЅСЃР°
export const getPlayerBalanceWheels = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/balance-wheel/player/${playerId}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё РєРѕР»РµСЃ Р±Р°Р»Р°РЅСЃР° РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

export const getPlayerBalanceWheelByDate = async (playerId: string, date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/balance-wheel/player/${playerId}/date/${date}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё РєРѕР»РµСЃР° Р±Р°Р»Р°РЅСЃР° РёРіСЂРѕРєР° СЃ ID ${playerId} РЅР° РґР°С‚Сѓ ${date}:`, error);
    throw error;
  }
};

export const saveBalanceWheel = async (playerId: string, data: BalanceWheel): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/balance-wheel/player/${playerId}`, data);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё СЃРѕС…СЂР°РЅРµРЅРёРё РєРѕР»РµСЃР° Р±Р°Р»Р°РЅСЃР° РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

export const updatePlayerBalanceWheel = async (wheelId: string, data: BalanceWheel): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.put(`/balance-wheel/${wheelId}`, data);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РѕР±РЅРѕРІР»РµРЅРёРё РєРѕР»РµСЃР° Р±Р°Р»Р°РЅСЃР° СЃ ID ${wheelId}:`, error);
    throw error;
  }
};

export const getAllPlayersBalanceWheelStats = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/balance-wheel/stats/all');
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃС‚Р°С‚РёСЃС‚РёРєРё РєРѕР»РµСЃ Р±Р°Р»Р°РЅСЃР° РІСЃРµС… РёРіСЂРѕРєРѕРІ:', error);
    throw error;
  }
};

export const getAllPlayersBalanceWheelStatsByDate = async (date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/balance-wheel/stats/all/date/${date}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃС‚Р°С‚РёСЃС‚РёРєРё РєРѕР»РµСЃ Р±Р°Р»Р°РЅСЃР° РІСЃРµС… РёРіСЂРѕРєРѕРІ РЅР° РґР°С‚Сѓ ${date}:`, error);
    throw error;
  }
};

export const forceRefreshBalanceWheel = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/balance-wheel/refresh/${playerId}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїСЂРёРЅСѓРґРёС‚РµР»СЊРЅРѕРј РѕР±РЅРѕРІР»РµРЅРёРё РєРѕР»РµСЃР° Р±Р°Р»Р°РЅСЃР° РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

// API С„СѓРЅРєС†РёРё РґР»СЏ СЂР°Р±РѕС‚С‹ СЃ Р·Р°РїРёСЃСЏРјРё РЅР°СЃС‚СЂРѕРµРЅРёСЏ Рё СЌРЅРµСЂРіРёРё
export const getPlayerMood = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/mood/player/${playerId}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё Р·Р°РїРёСЃРµР№ РЅР°СЃС‚СЂРѕРµРЅРёСЏ РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

export const getPlayerMoodByDate = async (playerId: string, date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/mood/player/${playerId}/date/${date}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё Р·Р°РїРёСЃРµР№ РЅР°СЃС‚СЂРѕРµРЅРёСЏ РёРіСЂРѕРєР° СЃ ID ${playerId} РЅР° РґР°С‚Сѓ ${date}:`, error);
    throw error;
  }
};

export const getAllPlayersMoodStats = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/mood/stats/all');
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃС‚Р°С‚РёСЃС‚РёРєРё РЅР°СЃС‚СЂРѕРµРЅРёСЏ РІСЃРµС… РёРіСЂРѕРєРѕРІ:', error);
    throw error;
  }
};

export const getAllPlayersMoodStatsByDate = async (date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/mood/stats/all/date/${date}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃС‚Р°С‚РёСЃС‚РёРєРё РЅР°СЃС‚СЂРѕРµРЅРёСЏ РІСЃРµС… РёРіСЂРѕРєРѕРІ РЅР° РґР°С‚Сѓ ${date}:`, error);
    throw error;
  }
};

export const saveMoodEntry = async (playerId: string, data: MoodEntry): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/mood/player/${playerId}`, data);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё СЃРѕС…СЂР°РЅРµРЅРёРё Р·Р°РїРёСЃРё РЅР°СЃС‚СЂРѕРµРЅРёСЏ РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

export const updateMoodEntry = async (entryId: string, data: MoodEntry): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.put(`/mood/${entryId}`, data);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РѕР±РЅРѕРІР»РµРЅРёРё Р·Р°РїРёСЃРё РЅР°СЃС‚СЂРѕРµРЅРёСЏ СЃ ID ${entryId}:`, error);
    throw error;
  }
};

export const forceRefreshMood = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/mood/refresh/${playerId}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїСЂРёРЅСѓРґРёС‚РµР»СЊРЅРѕРј РѕР±РЅРѕРІР»РµРЅРёРё Р·Р°РїРёСЃРµР№ РЅР°СЃС‚СЂРѕРµРЅРёСЏ РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

// API С„СѓРЅРєС†РёРё РґР»СЏ СЂР°Р±РѕС‚С‹ СЃ С‚РµСЃС‚Р°РјРё
export const getPlayerTests = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/tests/player/${playerId}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё С‚РµСЃС‚РѕРІ РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
      throw error;
    }
};

export const getPlayerTestsByDate = async (playerId: string, date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/tests/player/${playerId}/date/${date}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё С‚РµСЃС‚РѕРІ РёРіСЂРѕРєР° СЃ ID ${playerId} РЅР° РґР°С‚Сѓ ${date}:`, error);
    throw error;
  }
};

export const getAllPlayersTestStats = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/tests/stats/all');
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃС‚Р°С‚РёСЃС‚РёРєРё С‚РµСЃС‚РѕРІ РІСЃРµС… РёРіСЂРѕРєРѕРІ:', error);
    throw error;
  }
};

export const getAllPlayersTestStatsByDate = async (date: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get(`/tests/stats/all/date/${date}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїРѕР»СѓС‡РµРЅРёРё СЃС‚Р°С‚РёСЃС‚РёРєРё С‚РµСЃС‚РѕРІ РІСЃРµС… РёРіСЂРѕРєРѕРІ РЅР° РґР°С‚Сѓ ${date}:`, error);
    throw error;
  }
};

export const saveTestEntry = async (playerId: string, data: any): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/tests/player/${playerId}`, data);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё СЃРѕС…СЂР°РЅРµРЅРёРё С‚РµСЃС‚Р° РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

export const updateTestEntry = async (testId: string, data: any): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.put(`/tests/${testId}`, data);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РѕР±РЅРѕРІР»РµРЅРёРё С‚РµСЃС‚Р° СЃ ID ${testId}:`, error);
    throw error;
  }
};

export const forceRefreshTests = async (playerId: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/tests/refresh/${playerId}`);
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РїСЂРёРЅСѓРґРёС‚РµР»СЊРЅРѕРј РѕР±РЅРѕРІР»РµРЅРёРё С‚РµСЃС‚РѕРІ РёРіСЂРѕРєР° СЃ ID ${playerId}:`, error);
    throw error;
  }
};

// API С„СѓРЅРєС†РёРё РґР»СЏ Р°СѓС‚РµРЅС‚РёС„РёРєР°С†РёРё
export const login = async (email: string, password: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post('/auth/login', { email, password });
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё РІС…РѕРґРµ РІ СЃРёСЃС‚РµРјСѓ:', error);
    throw error;
  }
};

export const register = async (userData: any): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post('/auth/register', userData);
  } catch (error) {
    console.error('РћС€РёР±РєР° РїСЂРё СЂРµРіРёСЃС‚СЂР°С†РёРё:', error);
    throw error;
  }
};

export const changePassword = async (userId: string, oldPassword: string, newPassword: string): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.post(`/auth/change-password/${userId}`, { oldPassword, newPassword });
  } catch (error) {
    console.error(`РћС€РёР±РєР° РїСЂРё РёР·РјРµРЅРµРЅРёРё РїР°СЂРѕР»СЏ РґР»СЏ РїРѕР»СЊР·РѕРІР°С‚РµР»СЏ СЃ ID ${userId}:`, error);
    throw error;
  }
};

export const logout = (): void => {
  if (typeof window !== 'undefined') {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.href = '/login';
  }
};

// Р­РєСЃРїРѕСЂС‚РёСЂСѓРµРј СЌРєР·РµРјРїР»СЏСЂ axios РґР»СЏ РёСЃРїРѕР»СЊР·РѕРІР°РЅРёСЏ РІ РєРѕРјРїРѕРЅРµРЅС‚Р°С…
export default axiosInstance; 

// API функции для работы с командной статистикой настроения
export const getTeamMoodChartData = async (): Promise<AxiosResponse<any>> => {
  try {
    return await axiosInstance.get('/stats/team/mood/chart');
  } catch (error) {
    console.error('шибка при получении данных графика настроения команды:', error);
    // сли произошла ошибка, возвращаем пустые данные в нужном формате
    return {
      data: [],
      status: 200,
      statusText: 'OK',
      headers: {},
      config: {} as any
    } as AxiosResponse;
  }
};

// кспортируем экземпляр axios для использования в компонентах
export default axiosInstance;
