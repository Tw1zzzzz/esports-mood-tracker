// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º app –∏–∑ server.ts
import app from './server';
import mongoose from 'mongoose';

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç
const PORT = process.env.PORT || 5000;

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
mongoose.connection.once('open', () => {
  console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
  console.log(`üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${mongoose.connection.name}`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–π
  mongoose.connection.db.listCollections().toArray()
    .then(collections => {
      console.log('üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:', collections.map(c => c.name).join(', '));
    })
    .catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–π:', err);
    });
});

// –°–ª—É—à–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
mongoose.connection.on('error', (err) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
});

// –°–ª—É—à–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç MongoDB
mongoose.connection.on('disconnected', () => {
  console.warn('‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MongoDB');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (err) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err.message);
  console.error(err.stack);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π Promise
process.on('unhandledRejection', (reason, _promise) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ Promise:', reason);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞
const isPortAvailable = (port: number): Promise<boolean> => {
  return new Promise(resolve => {
    const server = require('net').createServer()
      .once('error', () => {
        resolve(false);
      })
      .once('listening', () => {
        server.close();
        resolve(true);
      })
      .listen(port);
  });
};

// –ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
const findAvailablePort = async (startPort: number, endPort: number = startPort + 10): Promise<number> => {
  for (let port = startPort; port <= endPort; port++) {
    const isAvailable = await isPortAvailable(port);
    if (isAvailable) {
      return port;
    }
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startPort}-${endPort}`);
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
const startServer = async () => {
  try {
    // –ò—â–µ–º —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å 5000
    const availablePort = await findAvailablePort(Number(PORT));
    console.log(`–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: ${availablePort}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç –≤ process.env –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
    process.env.PORT = String(availablePort);
    
    const server = app.listen(availablePort, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É: ${availablePort}`);
      console.log(`üåê –†–µ–∂–∏–º: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üîê JWT —Å–µ–∫—Ä–µ—Ç: ${process.env.JWT_SECRET ? '–Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'}`);
      console.log(`üì° –ê–¥—Ä–µ—Å API: http://localhost:${availablePort}/api`);
      console.log(`ü©∫ –ê–¥—Ä–µ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: http://localhost:${availablePort}/health`);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGTERM', () => {
      console.log('SIGTERM –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä');
      server.close(() => {
        console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      });
    });

    process.on('SIGINT', () => {
      console.log('SIGINT –ø–æ–ª—É—á–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä');
      server.close(() => {
        console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç');
      });
    });

    return server;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
startServer(); 