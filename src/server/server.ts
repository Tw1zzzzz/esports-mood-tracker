import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';
import cors from 'cors';
import path from 'path';

// –ú–∞—Ä—à—Ä—É—Ç—ã API
import authRoutes from './routes/auth';
import balanceWheelRoutes from './routes/balanceWheel';
import userRoutes from './routes/users';
import moodRoutes from './routes/mood';
import testsRoutes from './routes/tests';
import statsRoutes from './routes/stats';
import healthRoutes from './health';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤
app.use((req, res, next) => {
  const start = Date.now();
  const requestId = Math.random().toString(36).substring(2, 10);
  
  console.log(`üîç [${requestId}] ${req.method} ${req.url} - –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞`);
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ end
  const originalEnd = res.end;
  
  // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ end –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
  // @ts-ignore - –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö, –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ç–∏–ø–∞–º–∏
  res.end = function(
    _chunk?: any,
    _encoding?: BufferEncoding | (() => void),
    _callback?: (() => void)
  ): any {
    const duration = Date.now() - start;
    console.log(`‚úÖ [${requestId}] ${req.method} ${req.url} - —Å—Ç–∞—Ç—É—Å ${res.statusCode} (${duration}ms)`);
    
    // –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ end —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    return originalEnd.apply(this, arguments);
  };
  
  next();
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
mongoose.connect(process.env.MONGODB_URI || 'mongodb://127.0.0.1:27017/esports-mood-tracker')
  .then(() => {
    console.log('Connected to MongoDB');
  })
  .catch((error) => {
    console.error('MongoDB connection error:', error);
  });

// API –ú–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/users', userRoutes);
app.use('/api/balance-wheel', balanceWheelRoutes);
app.use('/api/mood', moodRoutes);
app.use('/api/tests', testsRoutes);
app.use('/api/stats', statsRoutes);
app.use('/health', healthRoutes);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 404 –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ API
app.use('/api/*', (req, res) => {
  console.log(`404 –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–∞: ${req.originalUrl}`);
  res.status(404).json({ 
    status: 'error', 
    message: 'API endpoint –Ω–µ –Ω–∞–π–¥–µ–Ω', 
    path: req.originalUrl 
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞ (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
app.get('/health-check', (_req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, '../../client/build')));
  
  app.get('*', (_req, res) => {
    res.sendFile(path.resolve(__dirname, '../../client/build', 'index.html'));
  });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
export default app; 