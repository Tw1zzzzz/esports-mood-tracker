Ниже собран полный документ-техническое задание на реализацию вкладки «Аналитика» с учётом MongoDB и подробной пользовательской логики. Его можно передать джуниор-разработчику как дорожную карту.

---

## 1. Введение

Сервис предоставляет игрокам и персоналу CRM-функции для киберспорта и хранит:
- **игровые метрики** (через Faceit API),
- **метрики настроения** и **колесо баланса**, которые вносят игроки,
- **предвычисленные отчёты** для быстрой отдачи аналитики.

Цель — доработать вкладку «Аналитика»: подключить автоматический импорт данных из Faceit, отобразить ключевые показатели, графики и метрики настроения, и описать пошаговый пользовательский сценарий регистрации и привязки аккаунта Faceit.

---

## 2. Архитектура системы

```
┌────────────┐        ┌─────────────────┐        ┌─────────────┐
│  Frontend  │◀──────▶│   Backend       │◀──────▶│   MongoDB   │
│ (React/Vue)│        │ (Node.js/Python)│        │ (Atlas/Local)│
└────────────┘        └─────────────────┘        └─────────────┘
                            ▲
                            │
                     ┌──────────────┐
                     │  Faceit API  │
                     │ (OAuth2 +    │
                     │   REST)      │
                     └──────────────┘
```

- **Frontend**: SPA на React или Vue.  
- **Backend**: микросервис `analytics` на Express/Koa (Node.js) или FastAPI (Python).  
- **MongoDB**: хранит коллекции `users`, `faceit_accounts`, `matches`, `player_metrics`, `analytics_cache`.  

---

## 3. Модель данных (коллекции MongoDB)

1. **users**
   ```js
   {
     _id: ObjectId,
     username: String,
     email: String,
     faceitAccountId: ObjectId|null,
     createdAt: Date,
     updatedAt: Date
   }
   ```
2. **faceit_accounts**
   ```js
   {
     _id: ObjectId,
     userId: ObjectId,
     faceitId: String,
     accessToken: String,
     refreshToken: String,
     tokenExpiresAt: Date,
     createdAt: Date
   }
   ```
   Индексы: `{ faceitId:1 }`, `{ userId:1 }`.

3. **matches**
   ```js
   {
     _id: ObjectId,
     faceitAccountId: ObjectId,
     matchId: String,
     gameType: String,
     map: String,
     result: "win"|"loss"|"draw",
     eloBefore: Number,
     eloAfter: Number,
     playedAt: Date,
     rawData: Object
   }
   ```
   Индекс: `{ faceitAccountId:1, playedAt:-1 }`.

4. **player_metrics**
   ```js
   {
     _id: ObjectId,
     userId: ObjectId,
     matchId: ObjectId|null,
     mood: Number,              // 1–10
     balanceWheel: { health, social, skills, … },
     createdAt: Date
   }
   ```
   TTL-индекс на `createdAt` (хранить год).

5. **analytics_cache**
   ```js
   {
     _id: ObjectId,
     userId: ObjectId,
     periodStart: Date,
     periodEnd: Date,
     stats: { totalMatches, avgElo, winRate, … },
     chartsData: Object,
     updatedAt: Date
   }
   ```
   TTL-индекс на `updatedAt` (обновлять раз в сутки).

---

## 4. Пользовательский сценарий (шаг за шагом)

1. **Регистрация на сервисе**  
   - Игрок заполняет форму (имя, e-mail, пароль) → отправляется POST `/api/users` → создаётся документ в `users`.

2. **Первый вход в «Аналитику»**  
   - В меню появляется пункт «Аналитика» → при первом клике показываем подсказку «Подключите ваш Faceit-аккаунт для автоматического импорта матчей».

3. **Подключение Faceit**  
   1. Игрок нажимает «Подключить Faceit».  
   2. Фронтенд вызывает `/api/faceit/oauth/init`, получает URL для OAuth и делает редирект на `https://faceit.com/oauth/authorize?...`.  
   3. Игрок вводит свои данные Faceit и даёт доступ. Faceit перенаправляет в `/api/faceit/oauth/callback?code=XYZ`.  
   4. Бэкенд обменивает `code` на `access_token` и `refresh_token`, сохраняет в `faceit_accounts` вместе с `faceitId` и `tokenExpiresAt`, а в документе пользователя проставляет `faceitAccountId`.

4. **Первичный импорт матчей**  
   - После сохранения токена запускается сразу же фоновая задача:  
     1. Вызывается `/players/{faceitId}/history` → приходит список recent матчей.  
     2. Для каждого нового `matchId` создаётся документ в `matches`.

5. **Дальнейший сбор данных**  
   - Каждый час (cron-job) бэкенд:  
     1. Находит все `faceit_accounts`, у которых `tokenExpiresAt` не истёк.  
     2. Запрашивает у Faceit новые матчи и upsert’ит их в `matches`.  
     3. При необходимости обновляет `access_token` по `refresh_token`.

6. **Внесение метрик настроения**  
   - После каждого матча игроку предлагается заполнить форму «Как вы себя чувствуете?» и «Колесо баланса».  
   - POST `/api/player_metrics` сохраняет документ в `player_metrics`.

7. **Отображение «Аналитики»**  
   - Фронтенд запрашивает `/api/analytics/stats?from=2025-04-01&to=2025-04-24&type=5on5`.  
   - Бэкенд через Aggregation Framework собирает:
     - общее число матчей, средний Elo, WinRate,
     - массив данных для графиков (Elo-динамика, исходы, radar для баланса),
     - средние метрики настроения.
   - Если в `analytics_cache` есть свежий кэш (updatedAt > сутки назад), отдаёт его.

8. **Интерактивная работа**  
   - Игрок меняет фильтры: период, тип игры → новые запросы к `/api/analytics/stats`.  
   - Визуализации обновляются без перезагрузки страницы.

---

## 5. Детальный план работ для Junior-разработчика

| Шаг | Задача                                      | Описание                                                                                     |
|-----|---------------------------------------------|----------------------------------------------------------------------------------------------|
| 1   | Подготовить окружение                       | – Клонировать фронтенд/бэкенд. <br>– Настроить `.env`: `MONGODB_URI`, `FACEIT_CLIENT_ID/SECRET`, `REDIRECT_URI`. |
| 2   | Изучить Faceit API                          | – Реализовать минимальный скрипт (Postman/VSCode) для OAuth2 и `/players/{id}/history`.      |
| 3   | Реализовать OAuth2-флоу                     | – Эндпоинты: `/api/faceit/oauth/init` и `/api/faceit/oauth/callback`. <br>– Сохранять токены в `faceit_accounts`. |
| 4   | Настроить cron-job для сбора матчей         | – В `analytics`-сервисе написать задачу (node-cron или Bull): <br>  • Обход всех `faceit_accounts`. <br>  • Запрос новых матчей и upsert в `matches`. |
| 5   | Спроектировать Aggregation-запросы          | – В `/api/analytics/stats` через MongoDB Aggregation Framework вычислять: <br>  • totalMatches, avgElo, winRate; <br>  • серию для Elo-динамики; <br>  • распределение Win/Loss; <br>  • radar-серии из `player_metrics`. |
| 6   | Реализовать UI «Аналитики»                  | – Компоненты: <br>  • Кнопка «Подключить Faceit» (с состоянием). <br>  • Дата-пикеры и селект типа игры. <br>  • KPI-карточки. <br>  • Графики (Recharts/Chart.js). <br>  • Таблица последних матчей. |
| 7   | Обработка метрик настроения                 | – Форма после матча, POST `/api/player_metrics`. <br>– В агрегате учитывать эти данные.       |
| 8   | Кэширование отчётов                         | – Коллекция `analytics_cache`, TTL-индекс. <br>– При запросе проверять кэш, иначе пересчитывать и сохранять. |
| 9   | Тестирование                                | – Unit-тесты на OAuth2, агрегации. <br>– Интеграционные: регистрация → подключение Faceit → отображение графиков. |
| 10  | Документация                                | – Описать коллекции, ключевые API, примеры запросов и ответов в `docs/analytics.md`.         |

---

## 6. Ключевые рекомендации

- **Индексы**: обязательно по полям фильтрации (`faceitAccountId`, `playedAt`, `userId`).  
- **Upsert**: не дублировать матчи при повторном запросе.  
- **Обновление токенов**: проверять `tokenExpiresAt`, использовать `refresh_token`.  
- **TTL-индексы**: для очистки старых кэшей и метрик.  
- **Разделение слоёв**: сервисы работы с Faceit, агрегатор, контроллеры API, UI-компоненты.

---

